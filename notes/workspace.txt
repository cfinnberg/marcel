
env handling:

API _generate_op assigns Op.env. Usually, pipeline construction clears
these, see run(), gather(), etc., and Node.__init__.

But if a command has a pipeline arg, the ops in that pipeline aren't
touched by this process. And for remote(..., pipeline), it's fatal,
because the pipeline is serialized, and the Env has something in it
causing trouble:

    Pickling an AuthenticationString object is disallowed for security reasons

Not yet sure what exactly causes this.

*** Can create_pipeline do the cleanup? In general, whenever the
    native function is evaluated, and we get a real Pipeline, it
    should be possible to remove the envs.

......................................................................

API & env handling:


Immediate execution:

E.g. run(ls())

- Ops have env assigned on creation, by marcel.api._generate_op.

- Op | Op -> Node, pipeline is represented by a tree of Nodes. 

- When a Node is constructed from others, env propagates up, so that
  the root always has an env and no descendents do.

- api._prepare_pipeline calls Node.create_pipeline(), which traverses 

- api._run_pipeline which uses Command.execute.


Pipeline function

E.g. 

x = reservoir('x')
run(gen(6)
    | ifthen(lambda x: x % 2 == 1, store(x))
    | select(lambda x: False))
run(load(x))

- ifthen's 2nd arg is a pipeline. It's a Node tree. Root has env,
  descendents do not.

- ifthen() calls Node.create_pipeline

*** Ifbase.setup gets created pipeline (type Pipeline), with store's
  env set. Calls PipelineWrapper.create, and because it's a Pipeline,
  and not a PipelineFunction, PW.create does the wrong thing! Creates
  a PipelineInteractive, not a PipelineAPI.

----------------------------------------------------------------------

It should be possible to use marcel.api without a Main or Environment, I think.

From marcel.api:

- ops need env! WHAT FOR?
  - getvar()
  - vars()
  - setvar()
  - color_scheme()
  - bash
  - is_interactive_executable
  - dir_state
  - reader
  - set edited_command
  - delvar
  - op_modules
  - mark_possible_changed
  - python_version()

- env.current_op.pos()

API has some dependencies on env for ops that are actually used by API
(as opposed to non-API ops):

- self.function.set_globals(env.vars()):
    - map
    - red
    - select
    - sort
    - squish
    - window

  Is set_globals needed for API? The function is an ordinary Python function and should already
  have its globals.

  Interactive: Map's function is SourceFunction
  API: NativeFunction

- self.picklefile = env.getvar(self.var):

    - load
    - store

  These ops already special-case API and Interactive

- env.getvar('DB_DEFAULT'): sql

  Require db to be specified for API


......................................................................

Farcel read_config is a copy of some Env code. 

- Clean up along with Environment.

- Not needed for API, but farcel doesn't know client-side usage
  (interactive, script, API)

- Filenames init no longer needs env arg.

----------------------------------------------------------------------

Op usage

                Interactive     Script         API
args                x             x             x
assign (1)          x             x
bash                x             x             x
bg                  x
cd                  x
difference          x             x             x
dirs                x
download            x             x             x
edit                x
env                 x             x
expand              x             x             x
fg                  x
filter              x             x             x
fork                x             x             x
gen                 x             x             x
head                x             x             x
help                x
history             x             x             x
ifelse              x             x             x
ifthen              x             x             x
import              x             x
intersect           x             x             x
jobs                x
join                x             x             x
load                x             x             x
ls                  x             x             x
map                 x             x             x
popd                x
ps                  x             x             x
pushd               x
pwd                 x
red                 x             x             x
read                x             x             x
remote              x             x             x
reverse             x             x             x
run                 x
runpipeline (2)     x             x
select              x             x             x
sort                x             x             x
squish              x             x             x
sql                 x             x             x
store               x             x             x
sudo                x             x             x
tail                x             x             x
tee                 x             x             x
timer               x             x             x
unique              x             x             x
union               x             x             x
upload              x             x             x
version             x             x             x
window              x             x             x
write               x             x             x

1: Assign *is* in the api currently. It operates on the env just like
CLI.

2: Not a public op

----------------------------------------------------------------------

Env.new:

- (*1) Get initial_namespace, either copying old_namespace, or copying os.environ().

- Set a bunch of vars: 

    USER
    HOME
    HOST
    MARCEL_VERSION
    PWD
    (*2) DIRS
    (*2) PROMPT
    (*2) PROMPT_CONTINUATION
    (*2) BOLD
    (*2) ITALIC
    (*2) COLOR_SCHEME
    (*2) Color
    pos
    (*2) EDITOR

- Add in public marcel.builtins

- (*3) Create NestedNamespace


*1: This looks wrong. Shouldn't os.environ be included in any case?
 Also should os.environ BE included at all?

*2: Only needed for interactive usage.

*3: Not needed for API?

----------------------------------------------------------------------

workspace op:

list      -l --list
create    -n --new
open      -o --open
close     -c --close
delete    -d --delete
rename    -r --rename
copy      -2 --dup
export    -e --export
import    -i --import

----------------------------------------------------------------------


Tasks

Open ws

- Revisit and cleanup marcel startup


Close ws

- Saving default ws command history

- Saving named wd command history


Main & Environment

- Cleanup:

  - Decide on use of Env from API. Is there one? Or are there just
    python vars?

  - Use Env for interactive usage only. Not for scripts, not for API.

  - Separate uses: interactive, API, script.

    - Some ops are only useful interactive: job control, edit, dir stack, help.

- Track symbols from startup script

- Prevent interactive update

- Prevent interactive deletion

- Handle symbol deleted from startup script (it should not appear on
  reload of startup)

- When a reservoir is created, the env must be saved first. Otherwise,
  there could be a reservoir not referenced by the environment.

- Env var for workspace name

- Add workspace name to default prompt.

- It should be possible to get rid of MARCEL_CONFIG

- old_namespace is only needed for default namespace. Otherwise, can
  be read from disk. Any way to get rid of old_namespace?

- Real arg processing for marcel execution.

- Stuff in startup.py not needed by API:

  - COLOR_SCHEME
  - PROMPT, PROMPT_CONTINUATION
  - INTERACTIVE_EXECUTABLES
  - RUN_ON_STARTUP: Just put that code in your own python code.

  Really not needed at all! 

- Why do Main and Environment both nead reader?


Directory structure for workspaces

- Modify Locations


Workspace locking


Workspace op

  - list      -l --list
  - create    -n --new
  - open      -o --open
  - close     -c --close
  - delete    -d --delete
  - rename    -r --rename
  - copy      -2 --dup
  - export    -e --export
  - import    -i --import


HistoryRecord

- Add timestamp

----------------------------------------------------------------------

Workspaces implementation

There must be a standard way to lock things in Linux. Alternative:
When using a workspace, create a .IN_USE file. Other processes check it.
Problem: there are ways for the process to end suddently, leaving the
.IN_USE file in place erroneously.

The .IN_USE file could store a pid. If that process is not running,
then it is a sign that the workspace is not actually in use and can be
deleted.

Locking is broken in Linux! http://0pointer.de/blog/projects/locking.html

- File F used to store "lock", which is a PID

- Lock protocol:

  - read F, check empty

      - If not empty and pid stored does not exist, steal the lock

      - If not empty and pid does exist, the file is locked

  - append pid to F, flush

  - read F

      - My pid: I have the lock
      - my pid is not there: shouldn't happen
      - my pid is there as well as someone else's:
          - first pid gets the lock


It's not that much of a race condition. We're talking about actual
console sessions by the SAME USER. Not even script execution. Two
different logins to the same username could still create a problem, I
guess.

......................................................................

Be clearer about role of Env in API usage. Is it there or not?

----------------------------------------------------------------------

Workspaces spec

Concepts:

Session: A marcel *session* is a process running marcel.  The session and
process end at the same instant.

Workspace: A *workspace* is the context in which marcel commands
executes.  Unless a workspace is specifically selected and used,
marcel runs using the *default workspace*. A *named workspace* must be
explicitly created and selected for use.

Workspace state comprises the following:

- A startup script: This provides imports and definitions to be used
  by the session.

- A command history: As marcel executes commands, they are recorded in
  the workspace's command history.

- An environment: This is a set of environment variables, established
  in part by the startup script.

The startup script is created upon workspace creation. Further changes
must be made by the user. Marcel maintains the other parts of
workspace state, the command history and environment.

Binding between sessions and workspaces: A session is always bound to
exactly one workspace. If no workspace is specified, then the default
workspace is used by a session.  A named workspace can be used by at
most one session at a time. The default workspace can be used by
multiple sessions at the same time.



Workspace lifecycle

Listing workspaces: Workspaces can be listed by marcel command,
e.g. "workspace --list". The listing will provide information on each
namespace, including name, creation date, and size on disk. 

Creating a workspace: A workspace is created by a marcel command,
e.g. "workspace --create NAME". This causes the workspace to be opened.

Opening a workspace: A workspace is opened when it is created, or when
it is explicitly opened, e.g. "workspace --open NAME". When a
workspace is joined, the session's currently bound workspace is
closed.

Closing a workspace: A workspace is closed by a session when it is in
use by a session, and the session joins a different workspace. Upon
closing, the command history is saved, and for a named workspace, the
environment is saved. When the default workspace is closed, the
environment is lost. A workspace can also be closed by marcel command,
e.g. "workspace --close". When a named workspace is closed, the
default workspace is opened. Closing the default workspace can be
done, but has no effect since the default workspace is immediately
joined again. (However, the default namespace's command history on
disk will be updated.)

There is a subtle difference in command history persistence between
the two kinds of workspaces. When a session bound to a named workspace
ends normally, the commands issued for that workspace are simply
appended to the command history on disk. Because simultaneous sessions
using the same named workspace cannot occur, we know that the command
history hasn't been changed since the workspace was opened by that
session. issued in previous sessions that used the same workspace.
But the default workspace can be used simultaneously by different
sessions. Care must be taken to ensure that all the commands, in all
the sessions, are stored. When a session using the default namespace
exits, the command history on disk is read, the commands from the
session are appended, and the modified history is then written back to
disk. All this is done under a lock, to prevent contention for the
history file between the read and the write. 

If a session ends abnormally, e.g. a crash due to a bug in marcel, or
due to the OOM killer, then for a named workspace, some recent changes
to the command history and environment may be lost. For a default
session, the command history of that session will definitely be lost
(and the environment isn't saved in any case).

Deleting a workspace: A workspace can be deleted if it is not in use
by any session (including the current session). Deletion can be done
by a marcel command, e.g. "workspace --delete NAME".  Deleting a
workspace deletes the saved command history, environment, and any
files and directories created by marcel on the workspace's behalf.

Renaming a workspace: A workspace not in use by any session (including
the current session) can be renamed by marcel command, e.g. "workspace
--rename NAME NEW_NAME".

Duplicating a workspace: A workspace not in use by any session (including
the current session) can be duplicated by marcel command, e.g. "workspace
--copy NAME COPY_NAME".

Exporting a workspace: A workspace not in use by any session
(including the current session) can be exported to a file by marcel
command, e.g. "workspace --export NAME FILENAME". The filename will be
given a .mws (marcel workspace) extension if the filename does not
already have that suffix. This file can be used to recreate a
workspace, e.g., for a different user.

Importing a workspace: A workspace can be imported, given a file
containing an exported workspace. The import is done by a marcel
command, e.g. "workspace --import EXPORT_MWS". The name of the
imported workspace will be unchanged. In case of a name collision, the
import can be done with a new name, e.g. "workspace --import-rename
EXPORT_MWS NEW_NAME".

----------------------------------------------------------------------

What is the role of a startup script? Does it get run once at the
beginning of the workspace? Or on each instantiation?

The imports are needed each time a process starts. The only (?) other
thing the startup script does is to populate the environment. The
imports can be viewed as adding to the namespace some values that
should not or cannot be persisted, e.g. modules.

Harmless to run obsolete definitions from startup.py, as long as that
precedes loading the environment. The environment will have the most
current version, and probably overwrite much of what is done in
startup without resulting in any change. E.g. the COLOR_SCHEMA
probably doesn't change.

Alternatively: The workspace DOES NOT have a startup script, just an
environment. But getting imported modules and functions right looks
difficult and delicate.

Could do the imports in RUN_ON_STARTUP. The import op could then
record what's been imported, and duplicate that in each
instance. Maybe block reassignment of imported symbols.

But having a startup script is convenient. I *can* replace a prompt
interactively, but it's kind of a pain. It would be nice to have a
startup script that does that. But then, you want the startup script
overriding the environment! E.g. if I want a new prompt: the env
already has one. I edit the startup script to get a new one. If env
overwrites startup script, then I don't get the new prompt.

So how about this:

- Startup loads environment

- Then runs startup script

This gets imports and a new prompt. But it also could "revert" and env
change. 

How about this: a symbol that comes in from the startup script cannot
be changed interactively, (i.e., assigned), it has to be done by
editing the startup script. (Changes already take effect immediately.)

----------------------------------------------------------------------

Workspace creation

I originally thought that you would use an anonymous marcel workspace,
decide to create a workspace, and that the instance's history (just the
commands in that instance) and environment would then be saved to
initialize the workspace. But that is messy. Those commands, and that
environment are part of the anonymous workspace, and could be persisted
at any time.

Creating a workspace on first reference to a new workspace name seems
dangerous. E.g. "switch to workspace abc" could succeed, creating a
workspace because that name is not in use. But what if it was a typo,
and the user meant abd. In that case, we have stuff in abc that should
have been in abd, and there doesn't seem to be a good way to rerun
those commands against abd. The results might have been completely
different.

So workspace creation should be explicit, on startup or during an
instance.

----------------------------------------------------------------------

workspace 

- use NAME

  - use workspace with given NAME.

  - close existing workspace

- close

  - close current workspace

  - If anonymous: save with a new name? discard?

- list

  - list all workspaces
    - name
    - create timestamp
    - last saved timestamp
    - size on disk

- properties:

  - name
  - startup file
  - create timestamp
  - last save timestamp
  - max size on disk
  - max size on disk for a single command output

----------------------------------------------------------------------

On disk:

Each workspace has its own startup?

.config/marcel/
    startup.py  # For anon workspaces, and template for named workspaces
    WORKSPACE_NAME/
        startup.py

.config/marcel/
    WORKSPACE_NAME/
        workspace.p  # Workspace properties (pickled) Or maybe JSON?
        env.p: Pickled environment
        history

Should workspace.p omit workspace name? If it's included, then that
creates an opportunity for a discrepancy, in case of a manual rename
of the WORKSPACE_NAME directory. And a workspace rename command gets more
complicated.

----------------------------------------------------------------------

Possible rules on workspace usage:

- A workspace can be used by at most one marcel instance at a time.

- Starting an anonymous workspace (no workspace selected) creates a new
  one. Resuming a workspace blocks anyone else from resuming the same
  workspace, (attempt results in error message and exit).

- Exiting anonymous workspace:

  - Present option to name it (don't allow duplicate names).

  - If declined, then save anyway with some identifying information?
    Or just delete it? Could save it with some descriptive information
    (e.g. start/end timestamps) to allow it to be located later.

- Exiting named workspace: No user input required.

- Allow for workspace rename



How is a named workspace deleted? Need workspace commands. Can only delete
one workspace while it is not in use, and from some other workspace.



Workspace management:

- List workspaces: name, size

- Delete workspace

- Duplicate workspace, giving duplicate a new name

- Start marcel with a named workspace. Problem: If you can't remember
  the name, you would need to start marcel to find out the name.

- Switch workspaces? That solves the forgotten name problem: Start anon,
  select a workspace. Switching to it ends the anon workspace. But then do
  we need all the end-of-anon workspace stuff?

- Prune workspace, deleting some subset of saved results. By time? By
  size? User-selected? Or have the user identify what to keep?

- Workspace state:

  - In /var/lib/marcel, owned by root? Maybe, but it's per-user
    state. Could also go to .local/share/marcel. But it's potentially
    a lot of space. Allow for user control.

  - Need to enforce a max, in case of commands that never end, e.g. "timer 1 | ..."


----------------------------------------------------------------------

Wait a minute. Why is automatically storing every command output a
good idea? It's already easy enough to store wanted results in a
variable, and then, with workspaces, persist those variables.

With everything stored, there's a lot to wade through, and cleaning
up, being selective about what's kept is labor intensive. Too easy to
accidentally delete something, too easy to be cautious and keep
everything, and then it's difficult to find what you want. Also
EVERYTHING is kept. Common shell usage is to refine commands until
they work properly. Just save the final, correct version.

Infinite output problem iss avoided. It should be pretty obvious that
"timer 1 ... > var" is a bad idea.

----------------------------------------------------------------------
    
Keep track of multiple histories


What happens when there are concurrent workspaces. Does one exiting
overwrite history from another?

Merge them all into one history?

If multiple histories are tracked, how to select one on startup?

Bash:

- history read at startup

- Changes tracked and written on exit. (Or maybe the whole history
  including changes from this console). But there isn't an
  overwrite. So on exit, the history must be read again, and local
  changes appended?

Generalizing this: Keep track of workspaces:

- A workspace has its own history.

- Vars are scoped to the workspace, and restarting a workspace brings back
  those vars and their values.

- Disallow multiple concurrent uses of a workspace?

- Support workspace distribution. E.g., tar czvf and write to
  specified location; import the package to create a workspace
  locally.

- I guess workspaces need names, or some way to refer to
  them. E.g. start marcel with workspace foobar. If no workspace
  specified, then:

  - vars not preserved?
  - what happens to history on exit?

- Workspace name should NOT BE STORED inside the workspace. Otherwise
  distribution gets messy. 

- Stream-valued vars can be large (on disk). Provide a way to manage
  them.

From https://github.com/geophile/marcel/issues/6:

    - Ability to hibernate (save context, close, and open it back again)

Exactly, that's a workspace.
    
    - Ability to store multiple result buffers (aka output of previous commands).

    - Ability to access the stored buffers and run processing functions on
      them (e.g. I take a snapshot of counters and after a while another
      snapshot - can I see the diff?)

Idea: Store results of previous commands automatically, (results would
be BEFORE an implicit write). Be able to recall these, based on this
history mechanism.


